steps for twitter app replication

The idea basically is: 
Create the variable in the js.
Bind an html element to it with a directive then, 
Show the object in the view 

<!-- /////////////////////////========Twitter Project=======\\\\\\\\\\\\\\\\\\\\\\\\\\\ -->
Create an html page with the UTF-8 charset metatag, a link element linking to ur minified bootstrap file or the CDN link and ur script elements to either a minified local file or a CDN link to anguar, jquery and ur js files in ur head element: 
	<head>
		<title>Twitter</title>
		<meta charset="UTF-8">

		<!-- load bootstrap and fontawesome via CDN (actually loading form the current directory. I downlaoded it. -) -->
		<link rel="stylesheet" href="bootstrap.min.css" />

		<!-- load angular via CDN (actually loading from the directory. I downloaded. -Kenny) -->
		<script src="angular.min.js"></script>
		<script src="twitter.js"></script>
	</head>

Put in a Navbar:
	<header>
		<nav class="navbar navbar-default">
			<div class="container">
				<div class="navbar-header">
					<a class="navbar-brand" href="#">twittister</a>
				</div>
				<ul class="nav navbar-nav navbar-right">
					<li><a href="#">The WHY</a></li>
					<li><a href="#">2nd Menu</a></li>
					<li><a href="#">3rd Menu</a></li>
				</ul>
			</div>
		</nav>
	</header>

Create a variable object in your js file that is the angular module: 
	In ur js file:
	var angularApp = angular.module('someName', []);

Add that angular module reference as an angular directive to ur html element:
	In the html tag: 
	ng-app="someName "

Add to html a containter div with another plain div in it with a p element in it with "This is my random phrase:" in it. 

Do some angular string interpolation by creating a basic controller in the angular module of the js file with the name of 'string': 
	angularApp.controller('stringController', function() {
	});

Inject the service/object Scope to your controller: 
	Should look like this: 
	angularApp.controller('stringController', ['$scope', function ($scope ) {
  }]);

Add a new object/var in the scope called name and give it your name in string: 
	In the controller: 
	$scope.phrase = 'Kenny Ken ken';

In ur P element in the html add a directive that points to the string controller that you put in the angular module in the js file: 
	<div class="container" >
		<p ng-controller="stringController">This is my random phrase dude: </p>
	</div>

Put a watcher on the var in the view by showing the randomPhrase var in the P element using string interpolation: 
	<div class="container" >
		<p ng-controller="stringController">This is my random phrase dude: {{randomPhrase}} </p>
	</div>

Bind an html element to a var in ur ng module by first creating a label and input box under your P element asking for input of what they want their twiffer handle to be, as well as a little output diaglog like "Your twitter handle is ..." : 
  <div class="container">
    <div >
    	<p>This is my random Phrase: {{phrase}} </p>
      <label>What do you want ur twittister handle to be?</label>
      <input type="text" />
      <h2>Your twittister handle is: </h2>
      <h2>twittister.com/ </h2>
    </div>
  </div>	

Create a var/model called 'handle' that's an empty string in a new controller called 'handleController' in ur angularApp module that ur injecting the Scope service/object: 
	angularApp.controller('handleController', ['$scope',  function ($scope) {
		$scope.handle = ' ';
	}]);

Add a ng-controller directive to the html element that your going to get the user's input in: 
	 Like maybe in the input element: 
   <input type="text" ng-controller="handleController" ng-model="handle" />

Add a directive to the Input element in ur html to bind the input to the handle var/model in new handleController: 
	In the same div: 
	<input type="text" ng-model="handle"/>

Put the string interpolated reference to the new var/model/object 'handle' in the html and test. Should see. 
	After ur www.twiffer.com/: 
	<h4>www.twiffer.com/ {{handle}} </h4>

Back in the String Controller, add another service/object called $timeout and use it in the controller by passing it a function that changes the string content of the name var to something else after two seconds: 
	angularApp.controller('mainController', ['$scope', '$timeout',  function('$scope', '$timeout' ) {
		$timeout(function() {
			$scope.phrase = 'Willy Wonka';
		}, 2000);
  }]);	

Set up routing by:
Add a folder called pages with a main.html page and a second.html page

Adding the ng-route dependency to the app to use to route urls to different pages:
	In the html file add a script link to the angular router of choice (ie ng-route or ui route etc), linking it either to a file with the downloaded file or to the website like: 
	<script type="text/javascript" src="//code.angularjs.org/1.4.7/angular-route.min.js "></script>

Tell the app that ur going to use this module which will be a dependency, by putting the dependency into the dependencies in the app: 
	In ur js file:
	var angularApp = angular.module('twinnerApp', ['ngRoute ']);	

Use the .config method that ngRoute module provides and call it on the app and pass in the $routeProvider service? to the function: 
	myApp.config(function($routeProvider) {
		
	});

Now pass the ng-route function to the config method to connect two different URLs to two different controllers by useing the when method and passing in the url, a json object that has the key/value pairs of The templateUrl and the controller: 
	myApp.config(function($routeProvider) {
		$routeProvider
			.when('/',  {
				templateUrl: 'pages/main.html', 
				controller: 'mainController'
			}) 
			.when('/second', {
				templateUrl: 'pages/second.html'
				controller: 'secondController'
			})
	});

Create a second controller for the second .when method to connect to: 
	myApp.controller('secondController', ['$scope', function ($scope) {
 
	}]);

Add the '/' and the '/second' to the menu bar links:
	<li><a href="#/">The WHY</a></li>
	<li><a href="#/second">Second Page</a></li>

Go to / and see if Main show's up. 

Add a timer or something you'd lilke to see happen in the controllers to prove they're reaching the view if you want. 

Pass ur URL a value using pattern matching: 

In ur config method, add :num to the second url: 
	On this line:
	.when('/second/:num', {

Inject the $routeParams service, that ng-route module gives us, into the secondController controller: 
	First line should look like: 
	angularApp.controller('secondController',  ['$scope', '$timeout', '$routeParams', function ($scope, $timeout, $routeParams) {

Make the value of whatever is passed into the URL hash, a property of routeParams, by appending it on the $routeParams object and assigning it to a variable in ur scope: 

Create a custom service called nameService by calling the .service method on ur app: 
	angularApp.service('nameService', function() {
	});	

Add a var in this service that we can use in the view: 

Inject this new service into your handle Controller and create a new var and assign the new service's var to it: 
	angularApp.controller('handleController', ['$scope', '$timeout', 'nameService', function ($scope, $timeout, nameService) {
	$scope.billybob = nameService.name;

Put the new var into a view that's tied to that controller: 
	<div ng-controller="handleController" >
	<p> {{billybob}} </p>

Create a custom directive by: 

Create a search feature on the main page: 
	 Put a little search area on the page with a search label, a box and search results listing using bootstrap list item, custom content html. 
	 
	 Convert the bootstrap search results html to a custom directive: 
	 	In ur js file, attach a directive to the angular app called 'searchResult' and give it a function that returns an object (the directive), with a template property (that is the html that gets outputted when this directive is used). 
	 		angularApp.directive('searchResult', function() {
				return {
					template: '<a href="#" class="list-group-item ">
			    <h4 class="list-group-item-heading">Frankie Jibbs</h4>
			    <p class="list-group-item-text">222 Main St., New York, NY 22222 </p>
			  </a>'
				}
			});
	 	Now get rid of the original 'search results' html and replace with your new directive normalizing the camelcase name of it to dashes. 
	 	  <search-result></search-result>
	 		Rf and should see results.
	 		Add the 'replace:true' property on ur directive's object, rf and rendered html should be just the directive's html and u shouldn't see the angular <search-result> element anymore in the pages loaded html if you check in inspect element. 
	 			<search-result></search-result>
			  <search-result></search-result>
			  <search-result></search-result>
			Use another way of inputting a directive by putting the name of it into a div like: 
			  <search-result></search-result>
				<div search-result ></div>			  
			  <search-result></search-result>
			Modularize your directive html code by putting it into a file in a folder and reference it from inside ur directive: 
				In main app, create a new folder called directives. 
				In that folder create a file called searchresult.html
				Take the html contents from your custom 'searchResults' directive and put them into this new html file. 
				In the object of the searchResult template, reference the new html in the new place by changing the template key to templateURL and make it's value the path to the new file like: 
					templateURL: 'directives/searchResult.html'
					rf & check.
				







