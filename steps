steps for twitter app replication

The idea basically is: 
Create the variable in the js.
Bind an html element to it with a directive then, 
Show the object in the view 

<!-- /////////////////////////========Twitter Project=======\\\\\\\\\\\\\\\\\\\\\\\\\\\ -->
Create an html page with the UTF-8 charset metatag, a link element linking to ur minified bootstrap file or the CDN link and ur script elements to either a minified local file or a CDN link to anguar, jquery and ur js files in ur head element: 
	<head>
		<title>Twitter</title>
		<meta charset="UTF-8">

		<!-- load bootstrap and fontawesome via CDN (actually loading form the current directory. I downlaoded it. -) -->
		<link rel="stylesheet" href="bootstrap.min.css" />

		<!-- load angular via CDN (actually loading from the directory. I downloaded. -Kenny) -->
		<script src="angular.min.js"></script>
		<script src="twitter.js"></script>
	</head>

Put in a Navbar:
	<header>
		<nav class="navbar navbar-default">
			<div class="container">
				<div class="navbar-header">
					<a class="navbar-brand" href="#">twittister</a>
				</div>
				<ul class="nav navbar-nav navbar-right">
					<li><a href="#">The WHY</a></li>
					<li><a href="#">2nd Menu</a></li>
					<li><a href="#">3rd Menu</a></li>
				</ul>
			</div>
		</nav>
	</header>

Create a variable object in your js file that is the angular module: 
	In ur js file:
	var angularApp = angular.module('someName', []);

Add that angular module reference as an angular directive to ur html element:
	In the html tag: 
	ng-app="someName "

Add to html a containter div with another plain div in it with a p element in it with "This is my random phrase:" in it. 

Do some angular string interpolation by creating a basic controller in the angular module of the js file with the name of 'string': 
	angularApp.controller('stringController', function() {
	});

Inject the service/object Scope to your controller: 
	Should look like this: 
	angularApp.controller('stringController', ['$scope', function ($scope ) {
  }]);

Add a new object/var in the scope called name and give it your name in string: 
	In the controller: 
	$scope.phrase = 'Kenny Ken ken';

In ur P element in the html add a directive that points to the string controller that you put in the angular module in the js file: 
	<div class="container" >
		<p ng-controller="stringController">This is my random phrase dude: </p>
	</div>

Put a watcher on the var in the view by showing the randomPhrase var in the P element using string interpolation: 
	<div class="container" >
		<p ng-controller="stringController">This is my random phrase dude: {{randomPhrase}} </p>
	</div>

Bind an html element to a var in ur ng module by first creating a label and input box under your P element asking for input of what they want their twiffer handle to be, as well as a little output diaglog like "Your twitter handle is ..." : 
  <div class="container">
    <div >
    	<p>This is my random Phrase: {{phrase}} </p>
      <label>What do you want ur twittister handle to be?</label>
      <input type="text" />
      <h2>Your twittister handle is: </h2>
      <h2>twittister.com/ </h2>
    </div>
  </div>	

Create a var/model called 'handle' that's an empty string in a new controller called 'handle' in ur angularApp module that ur injecting the Scope service/object: 
	angularApp.controller('handleController', ['$scope',  function ($scope) {
		$scope.handle = ' ';
	}]);

Add a directive to the Input element in ur html to bind the input to the handle var/model in new handleController: 
	In the same div: 
	<input type="text" ng-model="handle"/>

Put the string interpolated reference to the new var/model/object 'handle' in the html and test. Should see. 
	After ur www.twiffer.com/: 
	<h4>www.twiffer.com/ {{handle}} </h4>

Back in the String Controller, add another service/object called $timeout and use it in the controller by passing it a function that changes the string content of the name var to something else after two seconds: 
	angularApp.controller('mainController', ['$scope', '$timeout',  function('$scope', '$timeout' ) {
		$timeout(function() {
			$scope.phrase = 'Willy Wonka';
		}, 2000);
  }]);	

Set up routing by:

Adding the ng-route dependency to the app:




